#include <iostream>
#include <vector>

template <typename T>
void print(const std::vector<T>& vec) {
    for (const auto& element : vec) {
        std::cout << element << " ";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    print(numbers);

    std::vector<std::string> words = {"hello", "world"};
    print(words);

    return 0;
}

//У цьому прикладі шаблонна функція print дозволяє виводити вектор будь-якого типу без необхідності писати окремий код для кожного типу. 
//Використання шаблонів дозволяє нам створювати абстракції, які не призводять до витрат часу виконання або ресурсів.
//Принцип "нульової вартості абстракцій" (Zero-cost Abstractions) вказує на те, що добре спроектовані абстракції в програмному коді
// не призводять до додаткових витрат часу виконання або ресурсів. 
//Це означає, що використання абстракцій для полегшення роботи з кодом не призводить до погіршення продуктивності програми.
//Використання шаблонів в C++, які дозволяють створювати загальні конструкції коду, що не призводять до додаткових витрат пам'яті або часу виконання.